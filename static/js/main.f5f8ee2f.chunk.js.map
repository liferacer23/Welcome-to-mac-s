{"version":3,"sources":["Food.js","App.js","reportWebVitals.js","index.js"],"names":["Food","title","image","calories","ingredients","mealType","useState","flip","setFlip","height","setHeight","frontElement","useRef","backElement","useEffect","frontHeight","current","getBoundingClientRect","backHeight","Math","max","setMaxHeight","className","onClick","style","ref","src","alt","map","ingredient","text","App","query","setQuery","foods","setFood","search","setSearch","getFood","a","fetch","response","json","data","hits","console","log","getinput","e","preventDefault","onSubmit","value","placeholder","type","onChange","target","food","recipe","label","source","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAmDeA,EA9CH,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,MAAMC,EAAyC,EAAzCA,MAAMC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,YAAYC,EAAc,EAAdA,SAE3C,EAAsBC,oBAAS,GAA/B,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,WAAnC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAeC,mBACfC,EAAcD,mBAQpBE,qBAAU,YANW,WAEjB,IAAMC,EAAcJ,EAAaK,QAAQC,wBAAwBR,OAC3DS,EAAaP,EAAaK,QAAQC,wBAAwBR,OAChEC,EAAUS,KAAKC,IAAIL,EAAYG,EAAW,MAG1CG,KACF,CAACpB,EAAME,EAASE,EAASD,EAAYF,IAOvC,OACI,sBAAKoB,UAAS,eAAUf,EAAO,OAAO,IAAMgB,QANjC,WAEXf,GAASD,IAIqDiB,MAAO,CAACf,OAAOA,GAA7E,UACI,sBAAKa,UAAU,QAAQG,IAAKd,EAA5B,UACI,6BAAKV,IACL,qBAAKqB,UAAW,QAAQI,IAAKxB,EAAOyB,IAAI,YAE5C,sBAAKL,UAAU,OAAOG,IAAKZ,EAA3B,UACI,6CAAgBV,KAChB,6CAAgBE,KAChB,6BACCD,EAAYwB,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,mB,eC6BrBC,EA9DH,WAEV,IAEA,EAAyBzB,mBAAS,SAAlC,mBAAO0B,EAAP,KAAaC,EAAb,KACA,EAAyB3B,mBAAS,IAAlC,mBAAO4B,EAAP,KAAcC,EAAd,KACA,EAA0B7B,mBAAS,IAAnC,mBAAO8B,EAAP,KAAeC,EAAf,KAEAvB,qBAAU,WACVwB,MACE,CAACN,IAGH,IAAMM,EAAO,uCAAG,8BAAAC,EAAA,sEAESC,MAAM,mCAAD,OAAoCR,EAApC,mBAbnB,WAamB,oBAZlB,qCAUI,cAERS,EAFQ,gBAGMA,EAASC,OAHf,OAGPC,EAHO,OAIbR,EAAQQ,EAAKC,MACZC,QAAQC,IAAIZ,GALA,2CAAH,qDAaLa,EAAW,SAAAC,GAEdA,EAAEC,iBACFhB,EAASG,GACTC,EAAU,KAGb,OACE,sBAAKf,UAAU,MAAf,UACA,uBAAMA,UAAU,cAAc4B,SAAUH,EAAxC,UACA,uBAAOzB,UAAU,aAAa6B,MAAOf,EAAQgB,YAAY,YAAYC,KAAK,OAAOC,SAf9D,SAAAN,GAEnBX,EAAUW,EAAEO,OAAOJ,UAcnB,qBAAK7B,UAAU,gBAAeC,QAASwB,EAAvC,SAAiD,cAAC,IAAD,CAAUzB,UAAU,aAGrE,oBAAIA,UAAU,QAAd,8BACA,qBAAKA,UAAU,OAAf,SACA,yLAA2J,4BAE3J,qBAAKA,UAAU,OAAf,SACCY,EAAMN,KAAI,SAAA4B,GAAI,OACb,cAAC,EAAD,CAEMvD,MAASuD,EAAKC,OAAOC,MACrBxD,MAASsD,EAAKC,OAAOvD,MACrBC,SAAYqD,EAAKC,OAAOtD,SACxBC,YAAeoD,EAAKC,OAAOrD,YAC3BC,SAAUmD,EAAKC,OAAOpD,UALjBmD,EAAKC,OAAOE,iBCxChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f5f8ee2f.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\r\n\r\n\r\n\r\n\r\nconst Food =({title,image,calories,ingredients,mealType}) => {\r\n    \r\n    const [flip, setFlip]=useState(false);\r\n    const [height, setHeight]=useState('initial');\r\n    const frontElement = useRef();\r\n    const backElement = useRef();\r\n\r\n    const setMaxHeight = () =>\r\n    {\r\n        const frontHeight = frontElement.current.getBoundingClientRect().height;\r\n        const backHeight = frontElement.current.getBoundingClientRect().height;\r\n        setHeight(Math.max(frontHeight,backHeight,300));\r\n    }\r\n    useEffect(()=>{\r\n        setMaxHeight();\r\n    },[title,calories,mealType,ingredients,image]);\r\n\r\n    const flipper =()=>\r\n    {\r\n        setFlip(!flip);\r\n    }\r\n    \r\n    return (\r\n        <div className={`card ${flip ? 'flip':''}`} onClick={flipper} style={{height:height}}>\r\n            <div className=\"front\" ref={frontElement} >\r\n                <h2>{title}</h2>\r\n                <img className =\"image\" src={image} alt=\"Food\" />\r\n            </div>\r\n            <div className=\"back\" ref={backElement}>\r\n                <h3>Calories : {calories}</h3>\r\n                <h3>Meal Type: {mealType}</h3>  \r\n                <ol> \r\n                {ingredients.map(ingredient=>(\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Food;\r\n","import React, {useState, useEffect} from \"react\";\nimport Food from \"./Food\";\nimport \"./App.css\"\nimport { BsSearch } from \"react-icons/bs\";\n\nconst App = ()=>\n{\n  const ID = \"650e6302\";\n  const KEY = \"72f6465fc75711f0add62590f1cdff4c\";\n  const [query,setQuery] = useState(\"salad\");\n  const [foods, setFood] = useState([]);\n  const [search, setSearch]=useState(\"\");\n  \n  useEffect(()=>{\n  getFood();\n  },[query]);\n  \n  \n  const getFood = async ()=>\n  {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${ID}&app_key=${KEY}`);\n     const data = await response.json();\n     setFood(data.hits);\n      console.log(foods);\n    }\n    \n    const updateSearch = e =>\n    {\n      setSearch(e.target.value)\n    } \n     \n    const getinput = e =>\n    {\n       e.preventDefault();\n       setQuery(search);\n       setSearch(\"\");\n    }\n\n    return (\n      <div className=\"App\">  \n      <form className=\"search-form\" onSubmit={getinput}>\n      <input className=\"search-bar\" value={search} placeholder=\"Search...\" type=\"text\" onChange= {updateSearch} />\n      <div className=\"search-button\"onClick={getinput}><BsSearch className=\"bts\"/></div>\n      </form>\n    \n      <h1 className=\"title\">Welcome to mac's</h1>\n      <div className=\"desc\">\n      <p>A place were you can search for any food or drinks and find out the recipes of that food, not only that but you can also find the calories of that food.<br/></p>\n      </div>\n      <div className=\"food\">\n      {foods.map(food=>(\n        <Food \n              key={food.recipe.source}\n              title = {food.recipe.label}\n              image = {food.recipe.image}\n              calories = {food.recipe.calories}\n              ingredients = {food.recipe.ingredients}\n              mealType={food.recipe.mealType}\n              />\n      ))}\n\n      </div>\n      </div>\n     \n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}